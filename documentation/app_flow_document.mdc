---
description: Apply these rules when making changes to the project
globs:
alwaysApply: true
---

Update this rule if user requested changes to the project requirement, etc.
# UberHelpV8 App Flow Document

## Onboarding and Sign-In/Sign-Up
When a new user opens UberHelpV8 on their Android device, they are directly introduced to the app through a simple introductory landing screen. This initial page not only provides a brief overview of the app’s purpose but also directs the user to the essential Accessibility Setup Guide. Since the application is designed for a single Uber driver – in this case, for personal use – there is no need for a complicated sign-up or sign-in process. Instead, the user is guided to enable the necessary Android Accessibility Service so that the app can interact with the Uber Driver app. In this onboarding phase, clear and concise step-by-step instructions explain how to grant the required permissions, ensuring that even someone with minimal technical knowledge is able to follow along. While there is no traditional registration or login process, the app does provide guidance on restoring services or re-enabling permissions if they are inadvertently disabled. If any issues arise during the setup, the instructions include recommendations such as restarting the device to restore normal functionality.

## Main Dashboard or Home Page
Immediately after the accessibility service is successfully enabled, the user is taken to the Main Screen. This screen features a modern, dark-themed interface designed with a minimalistic aesthetic reminiscent of Apple design philosophy. The dominant component on the home screen is a prominent on/off toggle button that allows the user to activate or deactivate the core trip evaluation service. Surrounding this central switch, the layout remains uncluttered, ensuring that all attention is focused on the primary function of the app. There are visual cues and subtle headers that clearly indicate the current status of the service. Navigation from this dashboard to other parts of the app – such as the settings panel or the accessibility setup instructions – is made straightforward through clearly labeled buttons and intuitive interactions integrated into the user interface.

## Detailed Feature Flows and Page Transitions
After reaching the main dashboard, the app continuously monitors the Uber Driver app in the background through the Android Accessibility Service. The process begins with the extraction of trip details that include potential routes, estimated earnings, time of day, and other relevant contextual data. As the device captures this information, it is immediately processed on-device using TensorFlow Lite. The machine learning engine evaluates each trip, analyzing historical data stored locally in an SQLite database and considering external trends fetched through internet-based search triggered by parameters similar to perplexity. When the AI deems that a trip is optimal for maximizing hourly earnings, it marks it as “worth it” and automatically initiates the acceptance process in the background. If users wish to see more details or adjust parameters, they can navigate to an additional screen where more in-depth operational data or logs can be viewed. This advanced path also includes options to fine-tune the AI’s evaluation thresholds if needed. The transition among these service modules is seamless, with real-time updates ensuring that changes in service status or settings are immediately reflected on the screen, thus connecting the core functionalities and the secondary features in a continuous flow.

## Settings and Account Management
The settings panel is accessible from the main dashboard, offering a space where operational details can be managed. In this section, users can configure schedules for when the app should be actively monitoring for trips and adjust preferences for data capture. Although the storage of trip data and historical records happens locally through SQLite, the settings page allows for configuration of these storage preferences and other minor adjustments to how the system processes data. There is also a pathway back to the main screen once settings are applied; the interface provides clear visual feedback that confirms changes have been successfully implemented. Because the app is designed for a single driver with personal data, there is no complex account management system or billing interface. Instead, the settings section serves as a control center for ensuring that the app operates smoothly and according to the specific needs of the driver.

## Error States and Alternate Paths
In situations where the app encounters invalid data or if the interaction with the Uber Driver app is disrupted, the application gracefully guides the user through recovery steps. For example, if the accessibility reading process fails or if the AI makes an incorrect evaluation, the app is designed to show an error message on the screen. This message instructs the user on simple remedies, such as restarting the phone, thereby returning the app to a stable and operational state. In cases of connectivity issues or unexpected behavior due to data misinterpretation, fallback notifications appear that clearly explain the error in plain language. The design of these error states ensures that any interruption is brief and provides the necessary directions so that the user can quickly regain control without needing complicated troubleshooting procedures.

## Conclusion and Overall App Journey
The overall journey of UberHelpV8 is focused on simplicity and efficiency. Starting with a clear onboarding process that guides the user through enabling essential accessibility services, the app then seamlessly moves to a main screen dominated by a single, intuitive on/off toggle. In the background, the app continuously monitors the Uber Driver app to capture trip details and employs on-device machine learning to evaluate profitability in real time. When an opportunity is detected, the app automatically accepts the trip, ensuring that the driver maximizes earnings without delay. Settings and operational controls are easy to access and modify, while built-in error recovery paths ensure that any hiccups in the process are quickly resolved. Overall, UberHelpV8 delivers a streamlined and focused experience, where every step from initialization to automated trip acceptance is interconnected, ensuring the app remains functional and accessible at every stage of use.